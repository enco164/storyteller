-- MySQL Script generated by MySQL Workbench
-- 06/10/16 22:07:43
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema storyteller
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema storyteller
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `storyteller` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `storyteller` ;

-- -----------------------------------------------------
-- Table `storyteller`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`User` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`User` (
  `UserID` INT NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(30) NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `Password` VARCHAR(45) NOT NULL,
  `Institution` VARCHAR(100) NULL,
  `Note` VARCHAR(300) NULL,
  PRIMARY KEY (`UserID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Language` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Language` (
  `LanguageID` INT NOT NULL AUTO_INCREMENT,
  `LanguageName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`LanguageID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Kid`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Kid` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Kid` (
  `KidID` INT NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(45) NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `YearOfBirth` YEAR NOT NULL,
  `CityOfBirth` VARCHAR(45) NOT NULL,
  `StateOfBirth` VARCHAR(45) NOT NULL,
  `Gender` VARCHAR(1) NOT NULL,
  `EducationMother` VARCHAR(45) NOT NULL,
  `EducationFather` VARCHAR(45) NOT NULL,
  `LanguageMotherFK` INT NOT NULL,
  `LanguageFatherFK` INT NOT NULL,
  `LanguageSchoolFK` INT NOT NULL,
  `LanguageAdditionalSchoolFK` INT NOT NULL,
  PRIMARY KEY (`KidID`),
  INDEX `fk_Kid_Language1_idx` (`LanguageMotherFK` ASC),
  INDEX `fk_Kid_Language2_idx` (`LanguageFatherFK` ASC),
  INDEX `fk_Kid_Language3_idx` (`LanguageSchoolFK` ASC),
  INDEX `fk_Kid_Language4_idx` (`LanguageAdditionalSchoolFK` ASC),
  CONSTRAINT `jezikMajkaFK`
    FOREIGN KEY (`LanguageMotherFK`)
    REFERENCES `storyteller`.`Language` (`LanguageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `jezikOtacFK`
    FOREIGN KEY (`LanguageFatherFK`)
    REFERENCES `storyteller`.`Language` (`LanguageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `jezikSkolaFK`
    FOREIGN KEY (`LanguageSchoolFK`)
    REFERENCES `storyteller`.`Language` (`LanguageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `jezikDopunskaSkolaFK`
    FOREIGN KEY (`LanguageAdditionalSchoolFK`)
    REFERENCES `storyteller`.`Language` (`LanguageID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Residence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Residence` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Residence` (
  `ResidenceID` INT NOT NULL AUTO_INCREMENT,
  `State` VARCHAR(45) NOT NULL,
  `City` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ResidenceID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Kid_has_Residence`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Kid_has_Residence` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Kid_has_Residence` (
  `Kid_kidID` INT NOT NULL,
  `Residence_residenceID` INT NOT NULL,
  PRIMARY KEY (`Kid_kidID`, `Residence_residenceID`),
  INDEX `fk_Kid_has_Residence_Residence1_idx` (`Residence_residenceID` ASC),
  INDEX `fk_Kid_has_Residence_Kid_idx` (`Kid_kidID` ASC),
  CONSTRAINT `fk_Kid_has_Residence_Kid`
    FOREIGN KEY (`Kid_kidID`)
    REFERENCES `storyteller`.`Kid` (`KidID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Kid_has_Residence_Residence1`
    FOREIGN KEY (`Residence_residenceID`)
    REFERENCES `storyteller`.`Residence` (`ResidenceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`PictureBook`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`PictureBook` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`PictureBook` (
  `PictureBookID` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NOT NULL,
  `Authors` VARCHAR(45) NOT NULL,
  `Publisher` VARCHAR(45) NOT NULL,
  `YearOfPublishing` YEAR NOT NULL,
  PRIMARY KEY (`PictureBookID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Scene`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Scene` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Scene` (
  `SceneID` INT NOT NULL AUTO_INCREMENT,
  `SceneURL` VARCHAR(150) NOT NULL,
  `SceneNumber` INT NOT NULL,
  `PictureBookFK` INT NOT NULL,
  PRIMARY KEY (`SceneID`, `PictureBookFK`),
  INDEX `fk_Scene_Book1_idx` (`PictureBookFK` ASC),
  CONSTRAINT `fk_Scene_Book1`
    FOREIGN KEY (`PictureBookFK`)
    REFERENCES `storyteller`.`PictureBook` (`PictureBookID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`AudioRecording`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`AudioRecording` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`AudioRecording` (
  `AudioRecordingID` INT NOT NULL AUTO_INCREMENT,
  `RecordingDate` DATETIME NOT NULL,
  `AudioURL` VARCHAR(100) NOT NULL,
  `CreatedAt` DATETIME NOT NULL COMMENT 'Datetime when audio recording has been uploaded\n',
  PRIMARY KEY (`AudioRecordingID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Anotation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Anotation` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Anotation` (
  `AnotationID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Description` VARCHAR(300) NOT NULL,
  `StartIndex` INT NULL,
  `EndIndex` INT NULL,
  `Comment` VARCHAR(300) NULL,
  `Type` VARCHAR(45) NULL,
  PRIMARY KEY (`AnotationID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`AnnotationScheme`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`AnnotationScheme` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`AnnotationScheme` (
  `idAnnotationScheme` INT NOT NULL,
  `Blue` VARCHAR(45) NULL,
  `Green` VARCHAR(45) NULL,
  `Red` VARCHAR(45) NULL,
  `Aqua` VARCHAR(45) NULL,
  `Pink` VARCHAR(45) NULL,
  `Yellow` VARCHAR(45) NULL,
  `Orange` VARCHAR(45) NULL,
  `Description` VARCHAR(45) NULL,
  `Title` VARCHAR(45) NULL,
  PRIMARY KEY (`idAnnotationScheme`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Transcript`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Transcript` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Transcript` (
  `TranscriptID` INT NOT NULL AUTO_INCREMENT,
  `Text` VARCHAR(500) NOT NULL,
  `CreatedAt` DATETIME NOT NULL,
  `UpdatedAt` DATETIME NOT NULL,
  `AnnotationSchemeFK` INT NOT NULL,
  PRIMARY KEY (`TranscriptID`),
  INDEX `fk_Transcript_AnnotationScheme1_idx` (`AnnotationSchemeFK` ASC),
  CONSTRAINT `fk_Transcript_AnnotationScheme1`
    FOREIGN KEY (`AnnotationSchemeFK`)
    REFERENCES `storyteller`.`AnnotationScheme` (`idAnnotationScheme`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Transcript_has_Anotation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Transcript_has_Anotation` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Transcript_has_Anotation` (
  `Transcript_TranscriptID` INT NOT NULL,
  `Anotation_anotationID` INT NOT NULL,
  `CreatedAt` DATETIME NOT NULL,
  `UpdatedAt` DATETIME NOT NULL,
  PRIMARY KEY (`Transcript_TranscriptID`, `Anotation_anotationID`),
  INDEX `fk_Transcript_has_Anotation_Anotation1_idx` (`Anotation_anotationID` ASC),
  INDEX `fk_Transcript_has_Anotation_Transcript1_idx` (`Transcript_TranscriptID` ASC),
  CONSTRAINT `fk_Transcript_has_Anotation_Transcript1`
    FOREIGN KEY (`Transcript_TranscriptID`)
    REFERENCES `storyteller`.`Transcript` (`TranscriptID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Transcript_has_Anotation_Anotation1`
    FOREIGN KEY (`Anotation_anotationID`)
    REFERENCES `storyteller`.`Anotation` (`AnotationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`SceneTranscript`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`SceneTranscript` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`SceneTranscript` (
  `SceneTranscriptID` INT NOT NULL AUTO_INCREMENT,
  `TranscriptFK` INT NOT NULL,
  `SceneFK` INT NOT NULL,
  `PictureBookFK` INT NOT NULL,
  `Text` VARCHAR(1000) NULL,
  `CreatedAt` DATETIME NULL,
  `UpdatedAt` DATETIME NULL,
  PRIMARY KEY (`SceneTranscriptID`),
  INDEX `fk_SceneTranscript_Transcript1_idx` (`TranscriptFK` ASC),
  INDEX `fk_SceneTranscript_Scene1_idx` (`SceneFK` ASC, `PictureBookFK` ASC),
  CONSTRAINT `fk_SceneTranscript_Transcript1`
    FOREIGN KEY (`TranscriptFK`)
    REFERENCES `storyteller`.`Transcript` (`TranscriptID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SceneTranscript_Scene1`
    FOREIGN KEY (`SceneFK` , `PictureBookFK`)
    REFERENCES `storyteller`.`Scene` (`SceneID` , `PictureBookFK`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storyteller`.`Session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storyteller`.`Session` ;

CREATE TABLE IF NOT EXISTS `storyteller`.`Session` (
  `idSession` INT NOT NULL AUTO_INCREMENT,
  `User_UserID` INT NOT NULL,
  `Kid_KidID` INT NOT NULL,
  `PictureBook_PictureBookID` INT NOT NULL,
  `Transcript_TranscriptID` INT NOT NULL,
  `AudioRecording_AudioRecordingID` INT NOT NULL,
  PRIMARY KEY (`idSession`),
  INDEX `fk_Session_User1_idx` (`User_UserID` ASC),
  INDEX `fk_Session_Kid1_idx` (`Kid_KidID` ASC),
  INDEX `fk_Session_PictureBook1_idx` (`PictureBook_PictureBookID` ASC),
  INDEX `fk_Session_Transcript1_idx` (`Transcript_TranscriptID` ASC),
  INDEX `fk_Session_AudioRecording1_idx` (`AudioRecording_AudioRecordingID` ASC),
  CONSTRAINT `fk_Session_User1`
    FOREIGN KEY (`User_UserID`)
    REFERENCES `storyteller`.`User` (`UserID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Session_Kid1`
    FOREIGN KEY (`Kid_KidID`)
    REFERENCES `storyteller`.`Kid` (`KidID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Session_PictureBook1`
    FOREIGN KEY (`PictureBook_PictureBookID`)
    REFERENCES `storyteller`.`PictureBook` (`PictureBookID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Session_Transcript1`
    FOREIGN KEY (`Transcript_TranscriptID`)
    REFERENCES `storyteller`.`Transcript` (`TranscriptID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Session_AudioRecording1`
    FOREIGN KEY (`AudioRecording_AudioRecordingID`)
    REFERENCES `storyteller`.`AudioRecording` (`AudioRecordingID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
